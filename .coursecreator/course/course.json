{
  "summary" : "Java course.\nCreated: Jan 6, 2021, 10:38:09 AM.",
  "title" : "OOP Review Course",
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "inheritance",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "src/Shape.java" : {
              "name" : "src/Shape.java",
              "placeholders" : [
                {
                  "offset" : 243,
                  "length" : 105,
                  "possible_answer" : "public Shape(String name){this.setName(name);}",
                  "placeholder_text" : "/* TODO : Implement a constructor that takes in a String as parameter and sets the name of this object.*/"
                }
              ],
              "is_visible" : true,
              "text" : "public class Shape {\n    protected String name;\n    public String getName(){ return this.name;}\n    public void setName(String name){this.name = name;}\n    public double getArea(){return 0.0;}\n    public double getPerimeter(){return 0.0;}\n    /* TODO : Implement a constructor that takes in a String as parameter and sets the name of this object.*/\n}\n"
            },
            "test/TestShape.java" : {
              "name" : "test/TestShape.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.Constructor;\n\npublic class TestShape {\n\n  @Test\n  public void testShapeConstructor() throws NoSuchMethodException {\n    Class[] params = {String.class};\n    Constructor sc = Shape.class.getConstructor(params);\n    Assert.assertNotNull(\"Constructor with String not present\",sc);\n    Assert.assertTrue(\"You only need to implement one constructor\",Shape.class.getConstructors().length==1);\n  }\n\n  @Test\n  public void testShapeConstructorFunctionality() {\n    Shape s = new Shape(\"mick\");\n    Assert.assertEquals(\"Name variable is not functioning correctly. Check your constructor\",s.getName(),\"mick\");\n  }\n}"
            },
            "src/Square.java" : {
              "name" : "src/Square.java",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 155,
                  "possible_answer" : "public class Square extends Shape{\n    double side;\n    public Square(double side,String name){\n        super(name);\n        this.side=side;\n    }\n\n    @Override\n    public double getArea(){return this.side*this.side;}\n\n    @Override\n    public double getPerimeter() {\n        return this.side * 4;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if(obj!=null && obj.getClass() == this.getClass()){\n            Square s = (Square)obj;\n            return this.name.equals(s.name) && this.side==s.side;\n        }\n        return false;\n    }\n\n    @Override\n    public String toString() {\n        return this.name+\":\"+this.side;\n    }\n}\n",
                  "placeholder_text" : "/* TODO : Complete the Square class.\n Add variables if you need.\n Remember to use the @Override to override methods.\nintelliJ will be helpful if you do).*/"
                }
              ],
              "is_visible" : true,
              "text" : "/* TODO : Complete the Square class.\n Add variables if you need.\n Remember to use the @Override to override methods.\nintelliJ will be helpful if you do).*/"
            },
            "test/TestSquare.java" : {
              "name" : "test/TestSquare.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.Constructor;\n\npublic class TestSquare {\n    @Test\n    public void testInheritance(){\n        Square s = new Square(3,\"john\");\n        Assert.assertTrue(\"Square does not inherit from Shape\",s instanceof Shape);\n    }\n\n    @Test\n    public void testConstructor() throws\n            NoSuchMethodException {\n        Class[] params = {Double.TYPE,String.class};\n        Constructor sc = Square.class.getConstructor(params);\n        Assert.assertNotNull(\"Constructor with a double and a String not present\",sc);\n        Assert.assertTrue(\"You only need to implement one constructor\",Shape.class.getConstructors().length==1);\n    }\n\n    @Test\n    public void testAreaAndPerimeter(){\n        Square s = new Square(3.2,\"room 1\");\n        try{\n            Assert.assertEquals(\"Your area is not being calculated correctly\",s.getArea(),10.24,0.001);\n            Assert.assertEquals(\"Your perimeter is not being calculated correctly\",s.getPerimeter(),12.8,0.001);\n        } catch(Exception e){\n            Assert.fail(\"Are you sure you overrode the correct methods?\");\n        }\n    }\n\n    @Test\n    public void testEquals(){\n        Square s = new Square(3,\"juan\");\n        Square s1 = new Square(3,\"juan\");\n        Assert.assertEquals(\"Your constructor does not seem to be setting the name correctly\",s,s1);\n        s1.setName(\"john\");\n        Assert.assertNotEquals(\"Did you inherit the variables from Shape? you should not create a new name variable, nor modify or add getters and setters\",s,s1);\n        Shape o = new Square(3,\"juan\");\n        Assert.assertEquals(\"Did you check to see if both objects are of the same class?\",s,o);\n        Assert.assertNotEquals(\"Did you check that the object was null?\",s,null);\n    }\n\n    @Test\n    public void testToString(){\n        Square s = new Square(3,\"juan\");\n        Assert.assertEquals(\"Your toString method is not returning the correct string.\",\"juan:3.0\",s.toString());\n    }\n}\n"
            }
          },
          "description_text" : "<html>\n<p>Given the class <code>Shape</code>:<p>\n<ol>\n    <li>Create a constructor for <code>Shape</code> that takes in a <code>String</code>\n    as the name of the shape and sets the <code>name</code> variable accordingly.</li>\n    <li>Create a class <code>Square</code> that inherits from shape. </li>\n    <li>Create a constructor that takes in an <code>double</code>  and a <code>String</code> with the length of the side of the square.\n        and the name of the <code>Square</code>, respectively.</li>\n    <li>Override the <code>getArea</code> method to return the correct area of a square.</li>\n    <li>Override the <code>getPerimeter</code> method to return the perimeter of the square</li>\n    <li>Override the <code>equals</code> method to return true\n        if the Square being compared has the same side and name as the current <code>Square</code></li>\n    <li>Override the <code>toString</code> method to return the name and side of the <code>Square</code> separated by a colon. For example\n    if the <code>Square</code>'s name is <code>\"room 1\"</code> and the side is <code>19</code>, then this\n    method should return <code>room 1:19</code></li>\n</ol>\n\n<div class=\"hint\">Names and outputs should be created <strong>exactly</strong> as\nspecified. Sometimes an error is due to a typo, an extra space, and other smaller things.</div>\n\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "polymorphism",
      "task_list" : [ ],
      "type" : "lesson"
    },
    {
      "title" : "interfaces",
      "task_list" : [ ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    sourceSets {\n        main {\n            java.srcDir 'src'\n        }\n        test {\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    def runOutput = new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\n\nproject(':util') {\n    dependencies {\n        compile group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll {it.name != 'util'}) {\n  dependencies {\n    compile project(':util').sourceSets.main.output\n    testCompile project(':util').sourceSets.test.output\n  }\n}\n"
    }
  ],
  "version" : 11
}